"""init_migration

Revision ID: a17e68d41c90
Revises: 
Create Date: 2025-04-27 14:21:22.096875

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a17e68d41c90'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_core', sa.Boolean(), server_default='false', nullable=False),
    sa.CheckConstraint("name ~ '^[a-zA-Z0-9_ ]+$'", name=op.f('ck_roles_valid_role_name')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=128), nullable=True),
    sa.Column('email', sa.String(length=256), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.CheckConstraint("email ~* '^[A-Za-z0-9._%%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'", name=op.f('ck_users_valid_email')),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('login', name=op.f('uq_users_login'))
    )
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.create_table('files',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('is_image', sa.Boolean(), server_default='false', nullable=False, comment='является ли данный файл изображением'),
    sa.CheckConstraint("name <> ''", name=op.f('ck_files_non_empty_filename')),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_files_author_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_files'))
    )
    op.create_table('role_permissions',
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_role_permissions_created_by_users')),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_role_permissions_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role_permissions'))
    )
    op.create_index('idx_role_permission', 'role_permissions', ['role_id', 'permission'], unique=True)
    op.create_table('orders',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('preview', sa.Integer(), nullable=False),
    sa.Column('author', sa.Integer(), nullable=False),
    sa.Column('start_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('image_list', sa.Text(), nullable=True),
    sa.Column('delta_time', sa.DateTime(), nullable=True),
    sa.CheckConstraint("name <> ''", name=op.f('ck_orders_non_empty_name')),
    sa.CheckConstraint('start_price >= 0', name=op.f('ck_orders_positive_price')),
    sa.ForeignKeyConstraint(['author'], ['users.id'], name=op.f('fk_orders_author_users')),
    sa.ForeignKeyConstraint(['preview'], ['files.id'], name=op.f('fk_orders_preview_files')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders'))
    )
    op.create_table('reviews',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('file_id', sa.Integer(), nullable=False),
    sa.Column('grade', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('executor', sa.Integer(), nullable=False),
    sa.Column('author', sa.Integer(), nullable=False),
    sa.CheckConstraint('grade BETWEEN 1 AND 5', name=op.f('ck_reviews_valid_grade')),
    sa.ForeignKeyConstraint(['author'], ['users.id'], name=op.f('fk_reviews_author_users')),
    sa.ForeignKeyConstraint(['executor'], ['users.id'], name=op.f('fk_reviews_executor_users')),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], name=op.f('fk_reviews_file_id_files')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviews'))
    )
    op.create_table('chats',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('executor_id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('executor_id <> client_id', name=op.f('ck_chats_different_users')),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name=op.f('fk_chats_client_id_users')),
    sa.ForeignKeyConstraint(['executor_id'], ['users.id'], name=op.f('fk_chats_executor_id_users')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('fk_chats_order_id_orders')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_chats'))
    )
    op.create_table('messages',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('file_id', sa.Integer(), nullable=True),
    sa.CheckConstraint("text <> '' OR file_id IS NOT NULL", name=op.f('ck_messages_message_content')),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_messages_author_id_users')),
    sa.ForeignKeyConstraint(['chat_id'], ['chats.id'], name=op.f('fk_messages_chat_id_chats')),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], name=op.f('fk_messages_file_id_files')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('messages')
    op.drop_table('chats')
    op.drop_table('reviews')
    op.drop_table('orders')
    op.drop_index('idx_role_permission', table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_table('files')
    op.drop_index('users_email_key', table_name='users')
    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###
